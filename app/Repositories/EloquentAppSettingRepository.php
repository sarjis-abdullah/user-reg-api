<?php


namespace App\Repositories;


use App\Models\AppSetting;
use App\Models\Attachment;
use App\Repositories\Contracts\AppSettingRepository;
use App\Repositories\Contracts\AttachmentRepository;
use App\Repositories\Contracts\UserRepository;
use Illuminate\Support\Facades\DB;

class EloquentAppSettingRepository extends EloquentBaseRepository implements AppSettingRepository
{

    /**
     * @inheritDoc
     */
    public function findBy(array $searchCriteria = [], $withTrashed = false)
    {
        if(isset($searchCriteria['query'])) {
            $ids = $this->model->whereHas('branch', function ($query) use($searchCriteria) {
                    $query->where('name', 'like', '%'. $searchCriteria['query'] . '%');
                })
                ->pluck('branchId')
                ->toArray();

            $searchCriteria['branchId'] = isset($searchCriteria['branchId']) ? array_intersect($searchCriteria['branchId'], $ids) : $ids;

            unset($searchCriteria['query']);
        }

        if (isset($searchCriteria['branchId'])) {
            $searchCriteria['branchId'] = is_array($searchCriteria['branchId']) ? implode(",", array_unique($searchCriteria['branchId'])) : $searchCriteria['branchId'];
        }

        return parent::findBy($searchCriteria, $withTrashed); // TODO: Change the autogenerated stub
    }

    /**
     * set settings
     *
     * @param array $data
     * @return \ArrayAccess
     */
    public function setSettings(array $data) : \ArrayAccess
    {
        if (isset($data['settings'])){
            app(UserRepository::class)->logoutEveryUser($data['settings']);
        }

        if(isset($data['branchId'])) {
            return $this->patch(['type' => $data['type'], 'branchId' => $data['branchId']], $data);
        } else {
            return $this->patch(['type' => $data['type']], $data);
        }
    }
}
