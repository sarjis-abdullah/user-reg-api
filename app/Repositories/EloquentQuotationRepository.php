<?php


namespace App\Repositories;

use App\Models\Quotation;
use App\Repositories\Contracts\ProductRepository;
use App\Repositories\Contracts\QuotationRepository;
use App\Repositories\Contracts\StockRepository;
use Carbon\Carbon;
use Illuminate\Validation\ValidationException;

class EloquentQuotationRepository extends EloquentBaseRepository implements QuotationRepository
{

    /**
     * @inheritdoc
     */
    public function findBy(array $searchCriteria = [], $withTrashed = false)
    {
        $queryBuilder = $this->model;

        if (isset($searchCriteria['endDate'])) {
            $queryBuilder  =  $queryBuilder->whereDate('created_at', '<=', Carbon::parse($searchCriteria['endDate'])->endOfDay());
            unset($searchCriteria['endDate']);
        }

        if (isset($searchCriteria['startDate'])) {
            $queryBuilder =  $queryBuilder->whereDate('created_at', '>=', Carbon::parse($searchCriteria['startDate'])->startOfDay());
            unset($searchCriteria['startDate']);
        }

        $searchCriteria = $this->applyFilterInOrderSearch($searchCriteria);

        $queryBuilder = $queryBuilder->where(function ($query) use ($searchCriteria) {
            $this->applySearchCriteriaInQueryBuilder($query, $searchCriteria);
        });

        $limit = !empty($searchCriteria['per_page']) ? (int)$searchCriteria['per_page'] : 15;
        $orderBy = !empty($searchCriteria['order_by']) ? $searchCriteria['order_by'] : 'id';
        $orderDirection = !empty($searchCriteria['order_direction']) ? $searchCriteria['order_direction'] : 'desc';
        $queryBuilder->orderBy($orderBy, $orderDirection);


        if (empty($searchCriteria['withoutPagination'])) {
            return $queryBuilder->paginate($limit);
        } else {
            return $queryBuilder->get();
        }

    }
    /**
     * inherit doc
     * @throws ValidationException
     */
    public function save(array $data): \ArrayAccess
    {
        $data['status'] = $data['status'] ?? Quotation::STATUS_PENDING;

        $this->checkStock($data['products']);
        $data['products'] = $this->saveExtraInfoInsideProductsJson($data['products']);

        return parent::save($data);

    }

    /**
     * @inheritDoc
     * @throws ValidationException
     */
    public function update(\ArrayAccess $model, array $data): \ArrayAccess
    {
        $data['status'] = $data['status'] ?? Quotation::STATUS_PENDING;
        if (isset($data['products'])){
            $this->checkStock($data['products']);
            $data['products'] = $this->saveExtraInfoInsideProductsJson($data['products']);
        }

        return  parent::update($model, $data);
    }


    /**
     * @throws ValidationException
     */
    public function checkStock(array $products)
    {
        $stockRepository = app(StockRepository::class);
        foreach ($products as $product){
            $stock = $stockRepository->findOne($product['stockId']);
            if ($stock->quantity < $product['quantity']){
                throw ValidationException::withMessages([
                    'quantity' => ["Quantity can't be greater then stocks"]
                ]);
            }
        }
    }

    public function delete(\ArrayAccess $model): bool
    {
        return parent::delete($model); // TODO: Change the autogenerated stub
    }

    private function applyFilterInOrderSearch($searchCriteria)
    {
        if (isset($searchCriteria['query'])) {
            $searchCriteria['id'] = $this->model->where('invoice', 'like', '%' . $searchCriteria['query'] . '%')
                ->orWhere('status', $searchCriteria['query'])
                ->orWhereHas('customer', function($query) use ($searchCriteria){
                    $query->where('name', 'like', '%' . $searchCriteria['query'] . '%')
                        ->orWhere('email', 'like', '%' . $searchCriteria['query'] . '%')
                        ->orWhere('phone', 'like', '%' . $searchCriteria['query'] . '%');
                })
                ->pluck('id')->toArray();
            unset($searchCriteria['query']);
        }

        if (isset($searchCriteria['id'])) {
            $searchCriteria['id'] = is_array($searchCriteria['id']) ? implode(",", array_unique($searchCriteria['id'])) : $searchCriteria['id'];
        }

        return $searchCriteria;
    }

    public function saveExtraInfoInsideProductsJson($products): array
    {
        $productRepository = app(ProductRepository::class);

        return collect($products)->map(function ($item) use ($productRepository) {
            $productObj = $productRepository->findOne($item['productId']);
            $item['name'] = $productObj->name;
            return $item;
        })->toArray();
    }
}
